Recommandations sur l'utilisation des fichiers pour l'APP2.
A lire absolument !


****************************************************************
**  Pour tout le monde                                        **
****************************************************************

Renseignez ici les noms des membres de votre binôme :

Nom1 - prénom1 : MITTAL Sagar

Si vous avez des commentaires, remarques etc. pour le rendu, vous pouvez les 
mettre ici:

Tous marche sauf suprise (logique) pour ce qui est des tests mémoires, il n'y a aycun leaks.
le test test mysterieuse ne marche pas non plus mais il marche dans la version 1 et je ne l'ai pas faite ici par manque de temps (la commande Z inverse la pile)
Tous les tests performances marchent sauf testpiiile8192000.test qui est trop long 
cependant en faisant la commande : time  ./main -silent tests/perfs/testpiiile8192000.test il m'affiche un temps qui varie entre 6sec et 9.5 sec donc je ne comprend pas

Complexité :
L'idée le la structure une fois initialisé est de tous (ou presque faire en O(1)).
La fonction conversion est en O(n) car elle parcours tous les element du texte une fois et le point qui permet d'opptimiser cela 
est que quand on croise un groupe de commande on stock son adresse dans un tableau puis des que l'on croise la fin de se meme groupe 
on prend cette adresse stocke pour modifier le champ fin_groupe pour que le debut de ce groupe pointe vers la fin de son groupe
Du coup cela permet d'accéder directement a la fin et de ne pas avoir besoin de parcourir tout le groupe a chaque fois que l'on en a besoin
Comme dans la fonction exec_groupe (pour la commande '!') qui est en O(1) au lieu de O(l) ou l est le nombre d'élement dans le groupe.

Analyse de graphique:

base : on voit que l'orsqu'il n'y a pas de blocle programme tourne en O(n) car temps(linéaire)
long : pareil pour quand il y a beacoup de bloc (non-imbriqué) ---> O(n)
nested : de meme quand les bloc sont imbriqué
memfree : de meme quand on boucle de nombreuse fois
piiile : De meme pour une pile tres grande 

Donc l'ensemble du programme est en O(n) (linéaire).




****************************************************************
**  Langage Python                                            **
****************************************************************

Utilisez (et modifiez) le script "run.py" fourni.
(Lire le debut de ce fichier pour une explication de comment lancer les tests.)


Pour les tests de performance : lire le fichier LISEZMOI-perfs.txt


****************************************************************
**  Langage C                                                 **
****************************************************************

Compilation
-----------
Pour compiler :
> make

ou

> clang -Wall -Wextra main.c -o main curiosity.c interprete.c listes.c
(Nous vous conseillons d'utiliser le compilateur clang plutôt que gcc.)


Lancer un test
--------------

Test complet
> ./main tests/<nom de test>.test

Test en mode "pas à pas" :
> ./main -d tests/<nom de test>.test


Lancer une suite de tests
-------------------------

Tests fonctionnels :
> ./tests/check.py c

Tests en vérifiant les erreurs ou fuites mémoire:
> ./tests/check.py --mem c

Pour les tests de performance : lire le fichier LISEZMOI-perfs.txt
